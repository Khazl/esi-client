<?php
/**
 * ContactsApi
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use EsiClient\ApiException;
use EsiClient\Configuration;
use EsiClient\HeaderSelector;
use EsiClient\FormDataProcessor;
use EsiClient\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactsApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteCharactersCharacterIdContacts' => [
            'application/json',
        ],
        'getAlliancesAllianceIdContacts' => [
            'application/json',
        ],
        'getAlliancesAllianceIdContactsLabels' => [
            'application/json',
        ],
        'getCharactersCharacterIdContacts' => [
            'application/json',
        ],
        'getCharactersCharacterIdContactsLabels' => [
            'application/json',
        ],
        'getCorporationsCorporationIdContacts' => [
            'application/json',
        ],
        'getCorporationsCorporationIdContactsLabels' => [
            'application/json',
        ],
        'postCharactersCharacterIdContacts' => [
            'application/json',
        ],
        'putCharactersCharacterIdContacts' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation deleteCharactersCharacterIdContacts
     *
     * Delete contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  int[] $contact_ids A list of contacts to delete (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function deleteCharactersCharacterIdContacts(
        int $character_id,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?string $token = null,
        string $contentType = self::contentTypes['deleteCharactersCharacterIdContacts'][0]
    ): \EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->deleteCharactersCharacterIdContactsWithHttpInfo($character_id, $contact_ids, $datasource, $token, $contentType);
        return $response;
    }

    /**
     * Operation deleteCharactersCharacterIdContactsWithHttpInfo
     *
     * Delete contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  int[] $contact_ids A list of contacts to delete (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCharactersCharacterIdContactsWithHttpInfo(
        int $character_id,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?string $token = null,
        string $contentType = self::contentTypes['deleteCharactersCharacterIdContacts'][0]
    ): array
    {
        $request = $this->deleteCharactersCharacterIdContactsRequest($character_id, $contact_ids, $datasource, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation deleteCharactersCharacterIdContactsAsync
     *
     * Delete contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  int[] $contact_ids A list of contacts to delete (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCharactersCharacterIdContactsAsync(
        int $character_id,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?string $token = null,
        string $contentType = self::contentTypes['deleteCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        return $this->deleteCharactersCharacterIdContactsAsyncWithHttpInfo($character_id, $contact_ids, $datasource, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCharactersCharacterIdContactsAsyncWithHttpInfo
     *
     * Delete contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  int[] $contact_ids A list of contacts to delete (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteCharactersCharacterIdContactsAsyncWithHttpInfo(
        int $character_id,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?string $token = null,
        string $contentType = self::contentTypes['deleteCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteCharactersCharacterIdContactsRequest($character_id, $contact_ids, $datasource, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCharactersCharacterIdContacts'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  int[] $contact_ids A list of contacts to delete (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCharactersCharacterIdContactsRequest(
        int $character_id,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?string $token = null,
        string $contentType = self::contentTypes['deleteCharactersCharacterIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $character_id when calling deleteCharactersCharacterIdContacts'
            );
        }
        if ($character_id < 1) {
            throw new InvalidArgumentException('invalid value for "$character_id" when calling ContactsApi.deleteCharactersCharacterIdContacts, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling deleteCharactersCharacterIdContacts'
            );
        }
        if (count($contact_ids) > 20) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.deleteCharactersCharacterIdContacts, number of items must be less than or equal to 20.');
        }
        if (count($contact_ids) < 1) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.deleteCharactersCharacterIdContacts, number of items must be greater than or equal to 1.');
        }
        



        $resourcePath = '/characters/{character_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $contact_ids,
            'contact_ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAlliancesAllianceIdContacts
     *
     * Get alliance contacts
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getAlliancesAllianceIdContacts(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContacts'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getAlliancesAllianceIdContactsWithHttpInfo($alliance_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getAlliancesAllianceIdContactsWithHttpInfo
     *
     * Get alliance contacts
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAlliancesAllianceIdContactsWithHttpInfo(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContacts'][0]
    ): array
    {
        $request = $this->getAlliancesAllianceIdContactsRequest($alliance_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getAlliancesAllianceIdContactsAsync
     *
     * Get alliance contacts
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAlliancesAllianceIdContactsAsync(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContacts'][0]
    ): PromiseInterface
    {
        return $this->getAlliancesAllianceIdContactsAsyncWithHttpInfo($alliance_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAlliancesAllianceIdContactsAsyncWithHttpInfo
     *
     * Get alliance contacts
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAlliancesAllianceIdContactsAsyncWithHttpInfo(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetAlliancesAllianceIdContacts200Ok[]';
        $request = $this->getAlliancesAllianceIdContactsRequest($alliance_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAlliancesAllianceIdContacts'
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAlliancesAllianceIdContactsRequest(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'alliance_id' is set
        if ($alliance_id === null || (is_array($alliance_id) && count($alliance_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $alliance_id when calling getAlliancesAllianceIdContacts'
            );
        }
        if ($alliance_id < 1) {
            throw new InvalidArgumentException('invalid value for "$alliance_id" when calling ContactsApi.getAlliancesAllianceIdContacts, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling ContactsApi.getAlliancesAllianceIdContacts, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/alliances/{alliance_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($alliance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'alliance_id' . '}',
                ObjectSerializer::toPathValue($alliance_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAlliancesAllianceIdContactsLabels
     *
     * Get alliance contact labels
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getAlliancesAllianceIdContactsLabels(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContactsLabels'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getAlliancesAllianceIdContactsLabelsWithHttpInfo($alliance_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getAlliancesAllianceIdContactsLabelsWithHttpInfo
     *
     * Get alliance contact labels
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAlliancesAllianceIdContactsLabelsWithHttpInfo(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContactsLabels'][0]
    ): array
    {
        $request = $this->getAlliancesAllianceIdContactsLabelsRequest($alliance_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getAlliancesAllianceIdContactsLabelsAsync
     *
     * Get alliance contact labels
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAlliancesAllianceIdContactsLabelsAsync(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContactsLabels'][0]
    ): PromiseInterface
    {
        return $this->getAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo($alliance_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo
     *
     * Get alliance contact labels
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getAlliancesAllianceIdContactsLabelsAsyncWithHttpInfo(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContactsLabels'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetAlliancesAllianceIdContactsLabels200Ok[]';
        $request = $this->getAlliancesAllianceIdContactsLabelsRequest($alliance_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAlliancesAllianceIdContactsLabels'
     *
     * @param  int $alliance_id An EVE alliance ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAlliancesAllianceIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAlliancesAllianceIdContactsLabelsRequest(
        int $alliance_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getAlliancesAllianceIdContactsLabels'][0]
    ): Request
    {

        // verify the required parameter 'alliance_id' is set
        if ($alliance_id === null || (is_array($alliance_id) && count($alliance_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $alliance_id when calling getAlliancesAllianceIdContactsLabels'
            );
        }
        if ($alliance_id < 1) {
            throw new InvalidArgumentException('invalid value for "$alliance_id" when calling ContactsApi.getAlliancesAllianceIdContactsLabels, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/alliances/{alliance_id}/contacts/labels/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($alliance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'alliance_id' . '}',
                ObjectSerializer::toPathValue($alliance_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdContacts
     *
     * Get contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdContacts(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContacts'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getCharactersCharacterIdContactsWithHttpInfo($character_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdContactsWithHttpInfo
     *
     * Get contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdContactsWithHttpInfo(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContacts'][0]
    ): array
    {
        $request = $this->getCharactersCharacterIdContactsRequest($character_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdContactsAsync
     *
     * Get contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCharactersCharacterIdContactsAsync(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        return $this->getCharactersCharacterIdContactsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdContactsAsyncWithHttpInfo
     *
     * Get contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCharactersCharacterIdContactsAsyncWithHttpInfo(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetCharactersCharacterIdContacts200Ok[]';
        $request = $this->getCharactersCharacterIdContactsRequest($character_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdContacts'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdContactsRequest(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdContacts'
            );
        }
        if ($character_id < 1) {
            throw new InvalidArgumentException('invalid value for "$character_id" when calling ContactsApi.getCharactersCharacterIdContacts, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling ContactsApi.getCharactersCharacterIdContacts, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/characters/{character_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCharactersCharacterIdContactsLabels
     *
     * Get contact labels
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getCharactersCharacterIdContactsLabels(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContactsLabels'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getCharactersCharacterIdContactsLabelsWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCharactersCharacterIdContactsLabelsWithHttpInfo
     *
     * Get contact labels
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCharactersCharacterIdContactsLabelsWithHttpInfo(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContactsLabels'][0]
    ): array
    {
        $request = $this->getCharactersCharacterIdContactsLabelsRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getCharactersCharacterIdContactsLabelsAsync
     *
     * Get contact labels
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCharactersCharacterIdContactsLabelsAsync(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContactsLabels'][0]
    ): PromiseInterface
    {
        return $this->getCharactersCharacterIdContactsLabelsAsyncWithHttpInfo($character_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCharactersCharacterIdContactsLabelsAsyncWithHttpInfo
     *
     * Get contact labels
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCharactersCharacterIdContactsLabelsAsyncWithHttpInfo(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContactsLabels'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetCharactersCharacterIdContactsLabels200Ok[]';
        $request = $this->getCharactersCharacterIdContactsLabelsRequest($character_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCharactersCharacterIdContactsLabels'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCharactersCharacterIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCharactersCharacterIdContactsLabelsRequest(
        int $character_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCharactersCharacterIdContactsLabels'][0]
    ): Request
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $character_id when calling getCharactersCharacterIdContactsLabels'
            );
        }
        if ($character_id < 1) {
            throw new InvalidArgumentException('invalid value for "$character_id" when calling ContactsApi.getCharactersCharacterIdContactsLabels, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/characters/{character_id}/contacts/labels/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdContacts
     *
     * Get corporation contacts
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdContacts(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContacts'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getCorporationsCorporationIdContactsWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdContactsWithHttpInfo
     *
     * Get corporation contacts
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdContactsWithHttpInfo(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContacts'][0]
    ): array
    {
        $request = $this->getCorporationsCorporationIdContactsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdContactsAsync
     *
     * Get corporation contacts
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporationsCorporationIdContactsAsync(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContacts'][0]
    ): PromiseInterface
    {
        return $this->getCorporationsCorporationIdContactsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $page, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdContactsAsyncWithHttpInfo
     *
     * Get corporation contacts
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporationsCorporationIdContactsAsyncWithHttpInfo(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetCorporationsCorporationIdContacts200Ok[]';
        $request = $this->getCorporationsCorporationIdContactsRequest($corporation_id, $datasource, $if_none_match, $page, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdContacts'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  int|null $page Which page of results to return (optional, default to 1)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdContactsRequest(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?int $page = 1,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdContacts'
            );
        }
        if ($corporation_id < 1) {
            throw new InvalidArgumentException('invalid value for "$corporation_id" when calling ContactsApi.getCorporationsCorporationIdContacts, must be bigger than or equal to 1.');
        }
        


        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling ContactsApi.getCorporationsCorporationIdContacts, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/corporations/{corporation_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCorporationsCorporationIdContactsLabels
     *
     * Get corporation contact labels
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function getCorporationsCorporationIdContactsLabels(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContactsLabels'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->getCorporationsCorporationIdContactsLabelsWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType);
        return $response;
    }

    /**
     * Operation getCorporationsCorporationIdContactsLabelsWithHttpInfo
     *
     * Get corporation contact labels
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContactsLabels'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCorporationsCorporationIdContactsLabelsWithHttpInfo(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContactsLabels'][0]
    ): array
    {
        $request = $this->getCorporationsCorporationIdContactsLabelsRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getCorporationsCorporationIdContactsLabelsAsync
     *
     * Get corporation contact labels
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporationsCorporationIdContactsLabelsAsync(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContactsLabels'][0]
    ): PromiseInterface
    {
        return $this->getCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo($corporation_id, $datasource, $if_none_match, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo
     *
     * Get corporation contact labels
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getCorporationsCorporationIdContactsLabelsAsyncWithHttpInfo(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContactsLabels'][0]
    ): PromiseInterface
    {
        $returnType = '\EsiClient\Model\GetCorporationsCorporationIdContactsLabels200Ok[]';
        $request = $this->getCorporationsCorporationIdContactsLabelsRequest($corporation_id, $datasource, $if_none_match, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCorporationsCorporationIdContactsLabels'
     *
     * @param  int $corporation_id An EVE corporation ID (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  string|null $if_none_match ETag from a previous request. A 304 will be returned if this matches the current ETag (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCorporationsCorporationIdContactsLabels'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCorporationsCorporationIdContactsLabelsRequest(
        int $corporation_id,
        ?string $datasource = 'tranquility',
        ?string $if_none_match = null,
        ?string $token = null,
        string $contentType = self::contentTypes['getCorporationsCorporationIdContactsLabels'][0]
    ): Request
    {

        // verify the required parameter 'corporation_id' is set
        if ($corporation_id === null || (is_array($corporation_id) && count($corporation_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $corporation_id when calling getCorporationsCorporationIdContactsLabels'
            );
        }
        if ($corporation_id < 1) {
            throw new InvalidArgumentException('invalid value for "$corporation_id" when calling ContactsApi.getCorporationsCorporationIdContactsLabels, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/corporations/{corporation_id}/contacts/labels/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($corporation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'corporation_id' . '}',
                ObjectSerializer::toPathValue($corporation_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCharactersCharacterIdContacts
     *
     * Add contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the new contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return int[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout|\EsiClient\Model\PostCharactersCharacterIdContactsError520
     */
    public function postCharactersCharacterIdContacts(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['postCharactersCharacterIdContacts'][0]
    ): array|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout|\EsiClient\Model\PostCharactersCharacterIdContactsError520
    {
        list($response) = $this->postCharactersCharacterIdContactsWithHttpInfo($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);
        return $response;
    }

    /**
     * Operation postCharactersCharacterIdContactsWithHttpInfo
     *
     * Add contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the new contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of int[]|\EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout|\EsiClient\Model\PostCharactersCharacterIdContactsError520, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCharactersCharacterIdContactsWithHttpInfo(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['postCharactersCharacterIdContacts'][0]
    ): array
    {
        $request = $this->postCharactersCharacterIdContactsRequest($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'int[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\BadRequest',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Unauthorized',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\Forbidden',
                        $request,
                        $response,
                    );
                case 420:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ErrorLimited',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\InternalServerError',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\ServiceUnavailable',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\GatewayTimeout',
                        $request,
                        $response,
                    );
                case 520:
                    return $this->handleResponseWithDataType(
                        '\EsiClient\Model\PostCharactersCharacterIdContactsError520',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'int[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 520:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\PostCharactersCharacterIdContactsError520',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation postCharactersCharacterIdContactsAsync
     *
     * Add contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the new contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postCharactersCharacterIdContactsAsync(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['postCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        return $this->postCharactersCharacterIdContactsAsyncWithHttpInfo($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCharactersCharacterIdContactsAsyncWithHttpInfo
     *
     * Add contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the new contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function postCharactersCharacterIdContactsAsyncWithHttpInfo(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['postCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = 'int[]';
        $request = $this->postCharactersCharacterIdContactsRequest($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCharactersCharacterIdContacts'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the new contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCharactersCharacterIdContactsRequest(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['postCharactersCharacterIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $character_id when calling postCharactersCharacterIdContacts'
            );
        }
        if ($character_id < 1) {
            throw new InvalidArgumentException('invalid value for "$character_id" when calling ContactsApi.postCharactersCharacterIdContacts, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'standing' is set
        if ($standing === null || (is_array($standing) && count($standing) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $standing when calling postCharactersCharacterIdContacts'
            );
        }
        if ($standing > 10) {
            throw new InvalidArgumentException('invalid value for "$standing" when calling ContactsApi.postCharactersCharacterIdContacts, must be smaller than or equal to 10.');
        }
        if ($standing < -10) {
            throw new InvalidArgumentException('invalid value for "$standing" when calling ContactsApi.postCharactersCharacterIdContacts, must be bigger than or equal to -10.');
        }
        
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling postCharactersCharacterIdContacts'
            );
        }
        if (count($contact_ids) > 100) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.postCharactersCharacterIdContacts, number of items must be less than or equal to 100.');
        }
        if (count($contact_ids) < 1) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.postCharactersCharacterIdContacts, number of items must be greater than or equal to 1.');
        }
        

        if ($label_ids !== null && count($label_ids) > 63) {
            throw new InvalidArgumentException('invalid value for "$label_ids" when calling ContactsApi.postCharactersCharacterIdContacts, number of items must be less than or equal to 63.');
        }
        



        $resourcePath = '/characters/{character_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label_ids,
            'label_ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $standing,
            'standing', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $watched,
            'watched', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contact_ids)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contact_ids));
            } else {
                $httpBody = $contact_ids;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putCharactersCharacterIdContacts
     *
     * Edit contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
     */
    public function putCharactersCharacterIdContacts(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['putCharactersCharacterIdContacts'][0]
    ): \EsiClient\Model\BadRequest|\EsiClient\Model\Unauthorized|\EsiClient\Model\Forbidden|\EsiClient\Model\ErrorLimited|\EsiClient\Model\InternalServerError|\EsiClient\Model\ServiceUnavailable|\EsiClient\Model\GatewayTimeout
    {
        list($response) = $this->putCharactersCharacterIdContactsWithHttpInfo($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);
        return $response;
    }

    /**
     * Operation putCharactersCharacterIdContactsWithHttpInfo
     *
     * Edit contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putCharactersCharacterIdContactsWithHttpInfo(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['putCharactersCharacterIdContacts'][0]
    ): array
    {
        $request = $this->putCharactersCharacterIdContactsRequest($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Unauthorized',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\Forbidden',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 420:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ErrorLimited',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\InternalServerError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\ServiceUnavailable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EsiClient\Model\GatewayTimeout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation putCharactersCharacterIdContactsAsync
     *
     * Edit contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCharactersCharacterIdContactsAsync(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['putCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        return $this->putCharactersCharacterIdContactsAsyncWithHttpInfo($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putCharactersCharacterIdContactsAsyncWithHttpInfo
     *
     * Edit contacts
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function putCharactersCharacterIdContactsAsyncWithHttpInfo(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['putCharactersCharacterIdContacts'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->putCharactersCharacterIdContactsRequest($character_id, $standing, $contact_ids, $datasource, $label_ids, $token, $watched, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putCharactersCharacterIdContacts'
     *
     * @param  int $character_id An EVE character ID (required)
     * @param  float $standing Standing for the contact (required)
     * @param  int[] $contact_ids A list of contacts (required)
     * @param  string|null $datasource The server name you would like data from (optional, default to 'tranquility')
     * @param  int[]|null $label_ids Add custom labels to the contact (optional)
     * @param  string|null $token Access token to use if unable to set a header (optional)
     * @param  bool|null $watched Whether the contact should be watched, note this is only effective on characters (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putCharactersCharacterIdContacts'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putCharactersCharacterIdContactsRequest(
        int $character_id,
        float $standing,
        array $contact_ids,
        ?string $datasource = 'tranquility',
        ?array $label_ids = null,
        ?string $token = null,
        ?bool $watched = false,
        string $contentType = self::contentTypes['putCharactersCharacterIdContacts'][0]
    ): Request
    {

        // verify the required parameter 'character_id' is set
        if ($character_id === null || (is_array($character_id) && count($character_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $character_id when calling putCharactersCharacterIdContacts'
            );
        }
        if ($character_id < 1) {
            throw new InvalidArgumentException('invalid value for "$character_id" when calling ContactsApi.putCharactersCharacterIdContacts, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'standing' is set
        if ($standing === null || (is_array($standing) && count($standing) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $standing when calling putCharactersCharacterIdContacts'
            );
        }
        if ($standing > 10) {
            throw new InvalidArgumentException('invalid value for "$standing" when calling ContactsApi.putCharactersCharacterIdContacts, must be smaller than or equal to 10.');
        }
        if ($standing < -10) {
            throw new InvalidArgumentException('invalid value for "$standing" when calling ContactsApi.putCharactersCharacterIdContacts, must be bigger than or equal to -10.');
        }
        
        // verify the required parameter 'contact_ids' is set
        if ($contact_ids === null || (is_array($contact_ids) && count($contact_ids) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $contact_ids when calling putCharactersCharacterIdContacts'
            );
        }
        if (count($contact_ids) > 100) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.putCharactersCharacterIdContacts, number of items must be less than or equal to 100.');
        }
        if (count($contact_ids) < 1) {
            throw new InvalidArgumentException('invalid value for "$contact_ids" when calling ContactsApi.putCharactersCharacterIdContacts, number of items must be greater than or equal to 1.');
        }
        

        if ($label_ids !== null && count($label_ids) > 63) {
            throw new InvalidArgumentException('invalid value for "$label_ids" when calling ContactsApi.putCharactersCharacterIdContacts, number of items must be less than or equal to 63.');
        }
        



        $resourcePath = '/characters/{character_id}/contacts/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datasource,
            'datasource', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label_ids,
            'label_ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $standing,
            'standing', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $watched,
            'watched', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($character_id !== null) {
            $resourcePath = str_replace(
                '{' . 'character_id' . '}',
                ObjectSerializer::toPathValue($character_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($contact_ids)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($contact_ids));
            } else {
                $httpBody = $contact_ids;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
