<?php
/**
 * GetCorporationsCorporationIdMembertracking200Ok
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetCorporationsCorporationIdMembertracking200Ok Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCorporationsCorporationIdMembertracking200Ok implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_corporations_corporation_id_membertracking_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'base_id' => 'int',
        'character_id' => 'int',
        'location_id' => 'int',
        'logoff_date' => '\DateTime',
        'logon_date' => '\DateTime',
        'ship_type_id' => 'int',
        'start_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'base_id' => 'int32',
        'character_id' => 'int32',
        'location_id' => 'int64',
        'logoff_date' => 'date-time',
        'logon_date' => 'date-time',
        'ship_type_id' => 'int32',
        'start_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'base_id' => false,
        'character_id' => false,
        'location_id' => false,
        'logoff_date' => false,
        'logon_date' => false,
        'ship_type_id' => false,
        'start_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'base_id' => 'base_id',
        'character_id' => 'character_id',
        'location_id' => 'location_id',
        'logoff_date' => 'logoff_date',
        'logon_date' => 'logon_date',
        'ship_type_id' => 'ship_type_id',
        'start_date' => 'start_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'base_id' => 'setBaseId',
        'character_id' => 'setCharacterId',
        'location_id' => 'setLocationId',
        'logoff_date' => 'setLogoffDate',
        'logon_date' => 'setLogonDate',
        'ship_type_id' => 'setShipTypeId',
        'start_date' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'base_id' => 'getBaseId',
        'character_id' => 'getCharacterId',
        'location_id' => 'getLocationId',
        'logoff_date' => 'getLogoffDate',
        'logon_date' => 'getLogonDate',
        'ship_type_id' => 'getShipTypeId',
        'start_date' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('base_id', $data ?? [], null);
        $this->setIfExists('character_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('logoff_date', $data ?? [], null);
        $this->setIfExists('logon_date', $data ?? [], null);
        $this->setIfExists('ship_type_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['character_id'] === null) {
            $invalidProperties[] = "'character_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_id
     *
     * @return int|null
     */
    public function getBaseId(): ?int
    {
        return $this->container['base_id'];
    }

    /**
     * Sets base_id
     *
     * @param int|null $base_id base_id integer
     *
     * @return $this
     */
    public function setBaseId(?int $base_id): static
    {
        if (is_null($base_id)) {
            throw new InvalidArgumentException('non-nullable base_id cannot be null');
        }
        $this->container['base_id'] = $base_id;

        return $this;
    }

    /**
     * Gets character_id
     *
     * @return int
     */
    public function getCharacterId(): int
    {
        return $this->container['character_id'];
    }

    /**
     * Sets character_id
     *
     * @param int $character_id character_id integer
     *
     * @return $this
     */
    public function setCharacterId(int $character_id): static
    {
        if (is_null($character_id)) {
            throw new InvalidArgumentException('non-nullable character_id cannot be null');
        }
        $this->container['character_id'] = $character_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId(): ?int
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id location_id integer
     *
     * @return $this
     */
    public function setLocationId(?int $location_id): static
    {
        if (is_null($location_id)) {
            throw new InvalidArgumentException('non-nullable location_id cannot be null');
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets logoff_date
     *
     * @return \DateTime|null
     */
    public function getLogoffDate(): ?\DateTime
    {
        return $this->container['logoff_date'];
    }

    /**
     * Sets logoff_date
     *
     * @param \DateTime|null $logoff_date logoff_date string
     *
     * @return $this
     */
    public function setLogoffDate(?\DateTime $logoff_date): static
    {
        if (is_null($logoff_date)) {
            throw new InvalidArgumentException('non-nullable logoff_date cannot be null');
        }
        $this->container['logoff_date'] = $logoff_date;

        return $this;
    }

    /**
     * Gets logon_date
     *
     * @return \DateTime|null
     */
    public function getLogonDate(): ?\DateTime
    {
        return $this->container['logon_date'];
    }

    /**
     * Sets logon_date
     *
     * @param \DateTime|null $logon_date logon_date string
     *
     * @return $this
     */
    public function setLogonDate(?\DateTime $logon_date): static
    {
        if (is_null($logon_date)) {
            throw new InvalidArgumentException('non-nullable logon_date cannot be null');
        }
        $this->container['logon_date'] = $logon_date;

        return $this;
    }

    /**
     * Gets ship_type_id
     *
     * @return int|null
     */
    public function getShipTypeId(): ?int
    {
        return $this->container['ship_type_id'];
    }

    /**
     * Sets ship_type_id
     *
     * @param int|null $ship_type_id ship_type_id integer
     *
     * @return $this
     */
    public function setShipTypeId(?int $ship_type_id): static
    {
        if (is_null($ship_type_id)) {
            throw new InvalidArgumentException('non-nullable ship_type_id cannot be null');
        }
        $this->container['ship_type_id'] = $ship_type_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate(): ?\DateTime
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date string
     *
     * @return $this
     */
    public function setStartDate(?\DateTime $start_date): static
    {
        if (is_null($start_date)) {
            throw new InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


