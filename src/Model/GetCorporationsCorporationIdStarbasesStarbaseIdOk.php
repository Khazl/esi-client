<?php
/**
 * GetCorporationsCorporationIdStarbasesStarbaseIdOk
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetCorporationsCorporationIdStarbasesStarbaseIdOk Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCorporationsCorporationIdStarbasesStarbaseIdOk implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_corporations_corporation_id_starbases_starbase_id_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'allow_alliance_members' => 'bool',
        'allow_corporation_members' => 'bool',
        'anchor' => 'string',
        'attack_if_at_war' => 'bool',
        'attack_if_other_security_status_dropping' => 'bool',
        'attack_security_status_threshold' => 'float',
        'attack_standing_threshold' => 'float',
        'fuel_bay_take' => 'string',
        'fuel_bay_view' => 'string',
        'fuels' => '\EsiClient\Model\GetCorporationsCorporationIdStarbasesStarbaseIdFuel[]',
        'offline' => 'string',
        'online' => 'string',
        'unanchor' => 'string',
        'use_alliance_standings' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'allow_alliance_members' => null,
        'allow_corporation_members' => null,
        'anchor' => null,
        'attack_if_at_war' => null,
        'attack_if_other_security_status_dropping' => null,
        'attack_security_status_threshold' => 'float',
        'attack_standing_threshold' => 'float',
        'fuel_bay_take' => null,
        'fuel_bay_view' => null,
        'fuels' => null,
        'offline' => null,
        'online' => null,
        'unanchor' => null,
        'use_alliance_standings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'allow_alliance_members' => false,
        'allow_corporation_members' => false,
        'anchor' => false,
        'attack_if_at_war' => false,
        'attack_if_other_security_status_dropping' => false,
        'attack_security_status_threshold' => false,
        'attack_standing_threshold' => false,
        'fuel_bay_take' => false,
        'fuel_bay_view' => false,
        'fuels' => false,
        'offline' => false,
        'online' => false,
        'unanchor' => false,
        'use_alliance_standings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'allow_alliance_members' => 'allow_alliance_members',
        'allow_corporation_members' => 'allow_corporation_members',
        'anchor' => 'anchor',
        'attack_if_at_war' => 'attack_if_at_war',
        'attack_if_other_security_status_dropping' => 'attack_if_other_security_status_dropping',
        'attack_security_status_threshold' => 'attack_security_status_threshold',
        'attack_standing_threshold' => 'attack_standing_threshold',
        'fuel_bay_take' => 'fuel_bay_take',
        'fuel_bay_view' => 'fuel_bay_view',
        'fuels' => 'fuels',
        'offline' => 'offline',
        'online' => 'online',
        'unanchor' => 'unanchor',
        'use_alliance_standings' => 'use_alliance_standings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'allow_alliance_members' => 'setAllowAllianceMembers',
        'allow_corporation_members' => 'setAllowCorporationMembers',
        'anchor' => 'setAnchor',
        'attack_if_at_war' => 'setAttackIfAtWar',
        'attack_if_other_security_status_dropping' => 'setAttackIfOtherSecurityStatusDropping',
        'attack_security_status_threshold' => 'setAttackSecurityStatusThreshold',
        'attack_standing_threshold' => 'setAttackStandingThreshold',
        'fuel_bay_take' => 'setFuelBayTake',
        'fuel_bay_view' => 'setFuelBayView',
        'fuels' => 'setFuels',
        'offline' => 'setOffline',
        'online' => 'setOnline',
        'unanchor' => 'setUnanchor',
        'use_alliance_standings' => 'setUseAllianceStandings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'allow_alliance_members' => 'getAllowAllianceMembers',
        'allow_corporation_members' => 'getAllowCorporationMembers',
        'anchor' => 'getAnchor',
        'attack_if_at_war' => 'getAttackIfAtWar',
        'attack_if_other_security_status_dropping' => 'getAttackIfOtherSecurityStatusDropping',
        'attack_security_status_threshold' => 'getAttackSecurityStatusThreshold',
        'attack_standing_threshold' => 'getAttackStandingThreshold',
        'fuel_bay_take' => 'getFuelBayTake',
        'fuel_bay_view' => 'getFuelBayView',
        'fuels' => 'getFuels',
        'offline' => 'getOffline',
        'online' => 'getOnline',
        'unanchor' => 'getUnanchor',
        'use_alliance_standings' => 'getUseAllianceStandings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ANCHOR_ALLIANCE_MEMBER = 'alliance_member';
    public const ANCHOR_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const ANCHOR_CORPORATION_MEMBER = 'corporation_member';
    public const ANCHOR_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';
    public const FUEL_BAY_TAKE_ALLIANCE_MEMBER = 'alliance_member';
    public const FUEL_BAY_TAKE_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const FUEL_BAY_TAKE_CORPORATION_MEMBER = 'corporation_member';
    public const FUEL_BAY_TAKE_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';
    public const FUEL_BAY_VIEW_ALLIANCE_MEMBER = 'alliance_member';
    public const FUEL_BAY_VIEW_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const FUEL_BAY_VIEW_CORPORATION_MEMBER = 'corporation_member';
    public const FUEL_BAY_VIEW_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';
    public const OFFLINE_ALLIANCE_MEMBER = 'alliance_member';
    public const OFFLINE_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const OFFLINE_CORPORATION_MEMBER = 'corporation_member';
    public const OFFLINE_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';
    public const ONLINE_ALLIANCE_MEMBER = 'alliance_member';
    public const ONLINE_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const ONLINE_CORPORATION_MEMBER = 'corporation_member';
    public const ONLINE_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';
    public const UNANCHOR_ALLIANCE_MEMBER = 'alliance_member';
    public const UNANCHOR_CONFIG_STARBASE_EQUIPMENT_ROLE = 'config_starbase_equipment_role';
    public const UNANCHOR_CORPORATION_MEMBER = 'corporation_member';
    public const UNANCHOR_STARBASE_FUEL_TECHNICIAN_ROLE = 'starbase_fuel_technician_role';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getAnchorAllowableValues()
    {
        return [
            self::ANCHOR_ALLIANCE_MEMBER,
            self::ANCHOR_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::ANCHOR_CORPORATION_MEMBER,
            self::ANCHOR_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getFuelBayTakeAllowableValues()
    {
        return [
            self::FUEL_BAY_TAKE_ALLIANCE_MEMBER,
            self::FUEL_BAY_TAKE_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::FUEL_BAY_TAKE_CORPORATION_MEMBER,
            self::FUEL_BAY_TAKE_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getFuelBayViewAllowableValues()
    {
        return [
            self::FUEL_BAY_VIEW_ALLIANCE_MEMBER,
            self::FUEL_BAY_VIEW_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::FUEL_BAY_VIEW_CORPORATION_MEMBER,
            self::FUEL_BAY_VIEW_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getOfflineAllowableValues()
    {
        return [
            self::OFFLINE_ALLIANCE_MEMBER,
            self::OFFLINE_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::OFFLINE_CORPORATION_MEMBER,
            self::OFFLINE_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getOnlineAllowableValues()
    {
        return [
            self::ONLINE_ALLIANCE_MEMBER,
            self::ONLINE_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::ONLINE_CORPORATION_MEMBER,
            self::ONLINE_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getUnanchorAllowableValues()
    {
        return [
            self::UNANCHOR_ALLIANCE_MEMBER,
            self::UNANCHOR_CONFIG_STARBASE_EQUIPMENT_ROLE,
            self::UNANCHOR_CORPORATION_MEMBER,
            self::UNANCHOR_STARBASE_FUEL_TECHNICIAN_ROLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allow_alliance_members', $data ?? [], null);
        $this->setIfExists('allow_corporation_members', $data ?? [], null);
        $this->setIfExists('anchor', $data ?? [], null);
        $this->setIfExists('attack_if_at_war', $data ?? [], null);
        $this->setIfExists('attack_if_other_security_status_dropping', $data ?? [], null);
        $this->setIfExists('attack_security_status_threshold', $data ?? [], null);
        $this->setIfExists('attack_standing_threshold', $data ?? [], null);
        $this->setIfExists('fuel_bay_take', $data ?? [], null);
        $this->setIfExists('fuel_bay_view', $data ?? [], null);
        $this->setIfExists('fuels', $data ?? [], null);
        $this->setIfExists('offline', $data ?? [], null);
        $this->setIfExists('online', $data ?? [], null);
        $this->setIfExists('unanchor', $data ?? [], null);
        $this->setIfExists('use_alliance_standings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['allow_alliance_members'] === null) {
            $invalidProperties[] = "'allow_alliance_members' can't be null";
        }
        if ($this->container['allow_corporation_members'] === null) {
            $invalidProperties[] = "'allow_corporation_members' can't be null";
        }
        if ($this->container['anchor'] === null) {
            $invalidProperties[] = "'anchor' can't be null";
        }
        $allowedValues = self::getAnchorAllowableValues();
        if (!is_null($this->container['anchor']) && !in_array($this->container['anchor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'anchor', must be one of '%s'",
                $this->container['anchor'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['attack_if_at_war'] === null) {
            $invalidProperties[] = "'attack_if_at_war' can't be null";
        }
        if ($this->container['attack_if_other_security_status_dropping'] === null) {
            $invalidProperties[] = "'attack_if_other_security_status_dropping' can't be null";
        }
        if ($this->container['fuel_bay_take'] === null) {
            $invalidProperties[] = "'fuel_bay_take' can't be null";
        }
        $allowedValues = self::getFuelBayTakeAllowableValues();
        if (!is_null($this->container['fuel_bay_take']) && !in_array($this->container['fuel_bay_take'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fuel_bay_take', must be one of '%s'",
                $this->container['fuel_bay_take'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['fuel_bay_view'] === null) {
            $invalidProperties[] = "'fuel_bay_view' can't be null";
        }
        $allowedValues = self::getFuelBayViewAllowableValues();
        if (!is_null($this->container['fuel_bay_view']) && !in_array($this->container['fuel_bay_view'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fuel_bay_view', must be one of '%s'",
                $this->container['fuel_bay_view'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['fuels']) && (count($this->container['fuels']) > 20)) {
            $invalidProperties[] = "invalid value for 'fuels', number of items must be less than or equal to 20.";
        }

        if ($this->container['offline'] === null) {
            $invalidProperties[] = "'offline' can't be null";
        }
        $allowedValues = self::getOfflineAllowableValues();
        if (!is_null($this->container['offline']) && !in_array($this->container['offline'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'offline', must be one of '%s'",
                $this->container['offline'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['online'] === null) {
            $invalidProperties[] = "'online' can't be null";
        }
        $allowedValues = self::getOnlineAllowableValues();
        if (!is_null($this->container['online']) && !in_array($this->container['online'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'online', must be one of '%s'",
                $this->container['online'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['unanchor'] === null) {
            $invalidProperties[] = "'unanchor' can't be null";
        }
        $allowedValues = self::getUnanchorAllowableValues();
        if (!is_null($this->container['unanchor']) && !in_array($this->container['unanchor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'unanchor', must be one of '%s'",
                $this->container['unanchor'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['use_alliance_standings'] === null) {
            $invalidProperties[] = "'use_alliance_standings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_alliance_members
     *
     * @return bool
     */
    public function getAllowAllianceMembers(): bool
    {
        return $this->container['allow_alliance_members'];
    }

    /**
     * Sets allow_alliance_members
     *
     * @param bool $allow_alliance_members allow_alliance_members boolean
     *
     * @return $this
     */
    public function setAllowAllianceMembers(bool $allow_alliance_members): static
    {
        if (is_null($allow_alliance_members)) {
            throw new InvalidArgumentException('non-nullable allow_alliance_members cannot be null');
        }
        $this->container['allow_alliance_members'] = $allow_alliance_members;

        return $this;
    }

    /**
     * Gets allow_corporation_members
     *
     * @return bool
     */
    public function getAllowCorporationMembers(): bool
    {
        return $this->container['allow_corporation_members'];
    }

    /**
     * Sets allow_corporation_members
     *
     * @param bool $allow_corporation_members allow_corporation_members boolean
     *
     * @return $this
     */
    public function setAllowCorporationMembers(bool $allow_corporation_members): static
    {
        if (is_null($allow_corporation_members)) {
            throw new InvalidArgumentException('non-nullable allow_corporation_members cannot be null');
        }
        $this->container['allow_corporation_members'] = $allow_corporation_members;

        return $this;
    }

    /**
     * Gets anchor
     *
     * @return string
     */
    public function getAnchor(): string
    {
        return $this->container['anchor'];
    }

    /**
     * Sets anchor
     *
     * @param string $anchor Who can anchor starbase (POS) and its structures
     *
     * @return $this
     */
    public function setAnchor(string $anchor): static
    {
        if (is_null($anchor)) {
            throw new InvalidArgumentException('non-nullable anchor cannot be null');
        }
        $allowedValues = self::getAnchorAllowableValues();
        if (!in_array($anchor, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'anchor', must be one of '%s'",
                    $anchor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['anchor'] = $anchor;

        return $this;
    }

    /**
     * Gets attack_if_at_war
     *
     * @return bool
     */
    public function getAttackIfAtWar(): bool
    {
        return $this->container['attack_if_at_war'];
    }

    /**
     * Sets attack_if_at_war
     *
     * @param bool $attack_if_at_war attack_if_at_war boolean
     *
     * @return $this
     */
    public function setAttackIfAtWar(bool $attack_if_at_war): static
    {
        if (is_null($attack_if_at_war)) {
            throw new InvalidArgumentException('non-nullable attack_if_at_war cannot be null');
        }
        $this->container['attack_if_at_war'] = $attack_if_at_war;

        return $this;
    }

    /**
     * Gets attack_if_other_security_status_dropping
     *
     * @return bool
     */
    public function getAttackIfOtherSecurityStatusDropping(): bool
    {
        return $this->container['attack_if_other_security_status_dropping'];
    }

    /**
     * Sets attack_if_other_security_status_dropping
     *
     * @param bool $attack_if_other_security_status_dropping attack_if_other_security_status_dropping boolean
     *
     * @return $this
     */
    public function setAttackIfOtherSecurityStatusDropping(bool $attack_if_other_security_status_dropping): static
    {
        if (is_null($attack_if_other_security_status_dropping)) {
            throw new InvalidArgumentException('non-nullable attack_if_other_security_status_dropping cannot be null');
        }
        $this->container['attack_if_other_security_status_dropping'] = $attack_if_other_security_status_dropping;

        return $this;
    }

    /**
     * Gets attack_security_status_threshold
     *
     * @return float|null
     */
    public function getAttackSecurityStatusThreshold(): ?float
    {
        return $this->container['attack_security_status_threshold'];
    }

    /**
     * Sets attack_security_status_threshold
     *
     * @param float|null $attack_security_status_threshold Starbase (POS) will attack if target's security standing is lower than this value
     *
     * @return $this
     */
    public function setAttackSecurityStatusThreshold(?float $attack_security_status_threshold): static
    {
        if (is_null($attack_security_status_threshold)) {
            throw new InvalidArgumentException('non-nullable attack_security_status_threshold cannot be null');
        }
        $this->container['attack_security_status_threshold'] = $attack_security_status_threshold;

        return $this;
    }

    /**
     * Gets attack_standing_threshold
     *
     * @return float|null
     */
    public function getAttackStandingThreshold(): ?float
    {
        return $this->container['attack_standing_threshold'];
    }

    /**
     * Sets attack_standing_threshold
     *
     * @param float|null $attack_standing_threshold Starbase (POS) will attack if target's standing is lower than this value
     *
     * @return $this
     */
    public function setAttackStandingThreshold(?float $attack_standing_threshold): static
    {
        if (is_null($attack_standing_threshold)) {
            throw new InvalidArgumentException('non-nullable attack_standing_threshold cannot be null');
        }
        $this->container['attack_standing_threshold'] = $attack_standing_threshold;

        return $this;
    }

    /**
     * Gets fuel_bay_take
     *
     * @return string
     */
    public function getFuelBayTake(): string
    {
        return $this->container['fuel_bay_take'];
    }

    /**
     * Sets fuel_bay_take
     *
     * @param string $fuel_bay_take Who can take fuel blocks out of the starbase (POS)'s fuel bay
     *
     * @return $this
     */
    public function setFuelBayTake(string $fuel_bay_take): static
    {
        if (is_null($fuel_bay_take)) {
            throw new InvalidArgumentException('non-nullable fuel_bay_take cannot be null');
        }
        $allowedValues = self::getFuelBayTakeAllowableValues();
        if (!in_array($fuel_bay_take, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fuel_bay_take', must be one of '%s'",
                    $fuel_bay_take,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel_bay_take'] = $fuel_bay_take;

        return $this;
    }

    /**
     * Gets fuel_bay_view
     *
     * @return string
     */
    public function getFuelBayView(): string
    {
        return $this->container['fuel_bay_view'];
    }

    /**
     * Sets fuel_bay_view
     *
     * @param string $fuel_bay_view Who can view the starbase (POS)'s fule bay. Characters either need to have required role or belong to the starbase (POS) owner's corporation or alliance, as described by the enum, all other access settings follows the same scheme
     *
     * @return $this
     */
    public function setFuelBayView(string $fuel_bay_view): static
    {
        if (is_null($fuel_bay_view)) {
            throw new InvalidArgumentException('non-nullable fuel_bay_view cannot be null');
        }
        $allowedValues = self::getFuelBayViewAllowableValues();
        if (!in_array($fuel_bay_view, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fuel_bay_view', must be one of '%s'",
                    $fuel_bay_view,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel_bay_view'] = $fuel_bay_view;

        return $this;
    }

    /**
     * Gets fuels
     *
     * @return \EsiClient\Model\GetCorporationsCorporationIdStarbasesStarbaseIdFuel[]|null
     */
    public function getFuels(): ?array
    {
        return $this->container['fuels'];
    }

    /**
     * Sets fuels
     *
     * @param \EsiClient\Model\GetCorporationsCorporationIdStarbasesStarbaseIdFuel[]|null $fuels Fuel blocks and other things that will be consumed when operating a starbase (POS)
     *
     * @return $this
     */
    public function setFuels(?array $fuels): static
    {
        if (is_null($fuels)) {
            throw new InvalidArgumentException('non-nullable fuels cannot be null');
        }

        if ((count($fuels) > 20)) {
            throw new InvalidArgumentException('invalid value for $fuels when calling GetCorporationsCorporationIdStarbasesStarbaseIdOk., number of items must be less than or equal to 20.');
        }
        $this->container['fuels'] = $fuels;

        return $this;
    }

    /**
     * Gets offline
     *
     * @return string
     */
    public function getOffline(): string
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     *
     * @param string $offline Who can offline starbase (POS) and its structures
     *
     * @return $this
     */
    public function setOffline(string $offline): static
    {
        if (is_null($offline)) {
            throw new InvalidArgumentException('non-nullable offline cannot be null');
        }
        $allowedValues = self::getOfflineAllowableValues();
        if (!in_array($offline, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'offline', must be one of '%s'",
                    $offline,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets online
     *
     * @return string
     */
    public function getOnline(): string
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param string $online Who can online starbase (POS) and its structures
     *
     * @return $this
     */
    public function setOnline(string $online): static
    {
        if (is_null($online)) {
            throw new InvalidArgumentException('non-nullable online cannot be null');
        }
        $allowedValues = self::getOnlineAllowableValues();
        if (!in_array($online, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'online', must be one of '%s'",
                    $online,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets unanchor
     *
     * @return string
     */
    public function getUnanchor(): string
    {
        return $this->container['unanchor'];
    }

    /**
     * Sets unanchor
     *
     * @param string $unanchor Who can unanchor starbase (POS) and its structures
     *
     * @return $this
     */
    public function setUnanchor(string $unanchor): static
    {
        if (is_null($unanchor)) {
            throw new InvalidArgumentException('non-nullable unanchor cannot be null');
        }
        $allowedValues = self::getUnanchorAllowableValues();
        if (!in_array($unanchor, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'unanchor', must be one of '%s'",
                    $unanchor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unanchor'] = $unanchor;

        return $this;
    }

    /**
     * Gets use_alliance_standings
     *
     * @return bool
     */
    public function getUseAllianceStandings(): bool
    {
        return $this->container['use_alliance_standings'];
    }

    /**
     * Sets use_alliance_standings
     *
     * @param bool $use_alliance_standings True if the starbase (POS) is using alliance standings, otherwise using corporation's
     *
     * @return $this
     */
    public function setUseAllianceStandings(bool $use_alliance_standings): static
    {
        if (is_null($use_alliance_standings)) {
            throw new InvalidArgumentException('non-nullable use_alliance_standings cannot be null');
        }
        $this->container['use_alliance_standings'] = $use_alliance_standings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


