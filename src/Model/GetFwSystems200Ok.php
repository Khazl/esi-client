<?php
/**
 * GetFwSystems200Ok
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetFwSystems200Ok Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetFwSystems200Ok implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_fw_systems_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'contested' => 'string',
        'occupier_faction_id' => 'int',
        'owner_faction_id' => 'int',
        'solar_system_id' => 'int',
        'victory_points' => 'int',
        'victory_points_threshold' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'contested' => null,
        'occupier_faction_id' => 'int32',
        'owner_faction_id' => 'int32',
        'solar_system_id' => 'int32',
        'victory_points' => 'int32',
        'victory_points_threshold' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'contested' => false,
        'occupier_faction_id' => false,
        'owner_faction_id' => false,
        'solar_system_id' => false,
        'victory_points' => false,
        'victory_points_threshold' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'contested' => 'contested',
        'occupier_faction_id' => 'occupier_faction_id',
        'owner_faction_id' => 'owner_faction_id',
        'solar_system_id' => 'solar_system_id',
        'victory_points' => 'victory_points',
        'victory_points_threshold' => 'victory_points_threshold'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'contested' => 'setContested',
        'occupier_faction_id' => 'setOccupierFactionId',
        'owner_faction_id' => 'setOwnerFactionId',
        'solar_system_id' => 'setSolarSystemId',
        'victory_points' => 'setVictoryPoints',
        'victory_points_threshold' => 'setVictoryPointsThreshold'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'contested' => 'getContested',
        'occupier_faction_id' => 'getOccupierFactionId',
        'owner_faction_id' => 'getOwnerFactionId',
        'solar_system_id' => 'getSolarSystemId',
        'victory_points' => 'getVictoryPoints',
        'victory_points_threshold' => 'getVictoryPointsThreshold'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const CONTESTED_CAPTURED = 'captured';
    public const CONTESTED_CONTESTED = 'contested';
    public const CONTESTED_UNCONTESTED = 'uncontested';
    public const CONTESTED_VULNERABLE = 'vulnerable';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getContestedAllowableValues()
    {
        return [
            self::CONTESTED_CAPTURED,
            self::CONTESTED_CONTESTED,
            self::CONTESTED_UNCONTESTED,
            self::CONTESTED_VULNERABLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('contested', $data ?? [], null);
        $this->setIfExists('occupier_faction_id', $data ?? [], null);
        $this->setIfExists('owner_faction_id', $data ?? [], null);
        $this->setIfExists('solar_system_id', $data ?? [], null);
        $this->setIfExists('victory_points', $data ?? [], null);
        $this->setIfExists('victory_points_threshold', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['contested'] === null) {
            $invalidProperties[] = "'contested' can't be null";
        }
        $allowedValues = self::getContestedAllowableValues();
        if (!is_null($this->container['contested']) && !in_array($this->container['contested'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contested', must be one of '%s'",
                $this->container['contested'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['occupier_faction_id'] === null) {
            $invalidProperties[] = "'occupier_faction_id' can't be null";
        }
        if ($this->container['owner_faction_id'] === null) {
            $invalidProperties[] = "'owner_faction_id' can't be null";
        }
        if ($this->container['solar_system_id'] === null) {
            $invalidProperties[] = "'solar_system_id' can't be null";
        }
        if ($this->container['victory_points'] === null) {
            $invalidProperties[] = "'victory_points' can't be null";
        }
        if ($this->container['victory_points_threshold'] === null) {
            $invalidProperties[] = "'victory_points_threshold' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contested
     *
     * @return string
     */
    public function getContested(): string
    {
        return $this->container['contested'];
    }

    /**
     * Sets contested
     *
     * @param string $contested contested string
     *
     * @return $this
     */
    public function setContested(string $contested): static
    {
        if (is_null($contested)) {
            throw new InvalidArgumentException('non-nullable contested cannot be null');
        }
        $allowedValues = self::getContestedAllowableValues();
        if (!in_array($contested, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contested', must be one of '%s'",
                    $contested,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contested'] = $contested;

        return $this;
    }

    /**
     * Gets occupier_faction_id
     *
     * @return int
     */
    public function getOccupierFactionId(): int
    {
        return $this->container['occupier_faction_id'];
    }

    /**
     * Sets occupier_faction_id
     *
     * @param int $occupier_faction_id occupier_faction_id integer
     *
     * @return $this
     */
    public function setOccupierFactionId(int $occupier_faction_id): static
    {
        if (is_null($occupier_faction_id)) {
            throw new InvalidArgumentException('non-nullable occupier_faction_id cannot be null');
        }
        $this->container['occupier_faction_id'] = $occupier_faction_id;

        return $this;
    }

    /**
     * Gets owner_faction_id
     *
     * @return int
     */
    public function getOwnerFactionId(): int
    {
        return $this->container['owner_faction_id'];
    }

    /**
     * Sets owner_faction_id
     *
     * @param int $owner_faction_id owner_faction_id integer
     *
     * @return $this
     */
    public function setOwnerFactionId(int $owner_faction_id): static
    {
        if (is_null($owner_faction_id)) {
            throw new InvalidArgumentException('non-nullable owner_faction_id cannot be null');
        }
        $this->container['owner_faction_id'] = $owner_faction_id;

        return $this;
    }

    /**
     * Gets solar_system_id
     *
     * @return int
     */
    public function getSolarSystemId(): int
    {
        return $this->container['solar_system_id'];
    }

    /**
     * Sets solar_system_id
     *
     * @param int $solar_system_id solar_system_id integer
     *
     * @return $this
     */
    public function setSolarSystemId(int $solar_system_id): static
    {
        if (is_null($solar_system_id)) {
            throw new InvalidArgumentException('non-nullable solar_system_id cannot be null');
        }
        $this->container['solar_system_id'] = $solar_system_id;

        return $this;
    }

    /**
     * Gets victory_points
     *
     * @return int
     */
    public function getVictoryPoints(): int
    {
        return $this->container['victory_points'];
    }

    /**
     * Sets victory_points
     *
     * @param int $victory_points victory_points integer
     *
     * @return $this
     */
    public function setVictoryPoints(int $victory_points): static
    {
        if (is_null($victory_points)) {
            throw new InvalidArgumentException('non-nullable victory_points cannot be null');
        }
        $this->container['victory_points'] = $victory_points;

        return $this;
    }

    /**
     * Gets victory_points_threshold
     *
     * @return int
     */
    public function getVictoryPointsThreshold(): int
    {
        return $this->container['victory_points_threshold'];
    }

    /**
     * Sets victory_points_threshold
     *
     * @param int $victory_points_threshold victory_points_threshold integer
     *
     * @return $this
     */
    public function setVictoryPointsThreshold(int $victory_points_threshold): static
    {
        if (is_null($victory_points_threshold)) {
            throw new InvalidArgumentException('non-nullable victory_points_threshold cannot be null');
        }
        $this->container['victory_points_threshold'] = $victory_points_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


