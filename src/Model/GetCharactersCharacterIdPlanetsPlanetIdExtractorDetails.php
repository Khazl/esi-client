<?php
/**
 * GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails Class Doc Comment
 *
 * @description extractor_details object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_characters_character_id_planets_planet_id_extractor_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'cycle_time' => 'int',
        'head_radius' => 'float',
        'heads' => '\EsiClient\Model\GetCharactersCharacterIdPlanetsPlanetIdHead[]',
        'product_type_id' => 'int',
        'qty_per_cycle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cycle_time' => 'int32',
        'head_radius' => 'float',
        'heads' => null,
        'product_type_id' => 'int32',
        'qty_per_cycle' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'cycle_time' => false,
        'head_radius' => false,
        'heads' => false,
        'product_type_id' => false,
        'qty_per_cycle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'cycle_time' => 'cycle_time',
        'head_radius' => 'head_radius',
        'heads' => 'heads',
        'product_type_id' => 'product_type_id',
        'qty_per_cycle' => 'qty_per_cycle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'cycle_time' => 'setCycleTime',
        'head_radius' => 'setHeadRadius',
        'heads' => 'setHeads',
        'product_type_id' => 'setProductTypeId',
        'qty_per_cycle' => 'setQtyPerCycle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'cycle_time' => 'getCycleTime',
        'head_radius' => 'getHeadRadius',
        'heads' => 'getHeads',
        'product_type_id' => 'getProductTypeId',
        'qty_per_cycle' => 'getQtyPerCycle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cycle_time', $data ?? [], null);
        $this->setIfExists('head_radius', $data ?? [], null);
        $this->setIfExists('heads', $data ?? [], null);
        $this->setIfExists('product_type_id', $data ?? [], null);
        $this->setIfExists('qty_per_cycle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['heads'] === null) {
            $invalidProperties[] = "'heads' can't be null";
        }
        if ((count($this->container['heads']) > 10)) {
            $invalidProperties[] = "invalid value for 'heads', number of items must be less than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cycle_time
     *
     * @return int|null
     */
    public function getCycleTime(): ?int
    {
        return $this->container['cycle_time'];
    }

    /**
     * Sets cycle_time
     *
     * @param int|null $cycle_time in seconds
     *
     * @return $this
     */
    public function setCycleTime(?int $cycle_time): static
    {
        if (is_null($cycle_time)) {
            throw new InvalidArgumentException('non-nullable cycle_time cannot be null');
        }
        $this->container['cycle_time'] = $cycle_time;

        return $this;
    }

    /**
     * Gets head_radius
     *
     * @return float|null
     */
    public function getHeadRadius(): ?float
    {
        return $this->container['head_radius'];
    }

    /**
     * Sets head_radius
     *
     * @param float|null $head_radius head_radius number
     *
     * @return $this
     */
    public function setHeadRadius(?float $head_radius): static
    {
        if (is_null($head_radius)) {
            throw new InvalidArgumentException('non-nullable head_radius cannot be null');
        }
        $this->container['head_radius'] = $head_radius;

        return $this;
    }

    /**
     * Gets heads
     *
     * @return \EsiClient\Model\GetCharactersCharacterIdPlanetsPlanetIdHead[]
     */
    public function getHeads(): array
    {
        return $this->container['heads'];
    }

    /**
     * Sets heads
     *
     * @param \EsiClient\Model\GetCharactersCharacterIdPlanetsPlanetIdHead[] $heads heads array
     *
     * @return $this
     */
    public function setHeads(array $heads): static
    {
        if (is_null($heads)) {
            throw new InvalidArgumentException('non-nullable heads cannot be null');
        }

        if ((count($heads) > 10)) {
            throw new InvalidArgumentException('invalid value for $heads when calling GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails., number of items must be less than or equal to 10.');
        }
        $this->container['heads'] = $heads;

        return $this;
    }

    /**
     * Gets product_type_id
     *
     * @return int|null
     */
    public function getProductTypeId(): ?int
    {
        return $this->container['product_type_id'];
    }

    /**
     * Sets product_type_id
     *
     * @param int|null $product_type_id product_type_id integer
     *
     * @return $this
     */
    public function setProductTypeId(?int $product_type_id): static
    {
        if (is_null($product_type_id)) {
            throw new InvalidArgumentException('non-nullable product_type_id cannot be null');
        }
        $this->container['product_type_id'] = $product_type_id;

        return $this;
    }

    /**
     * Gets qty_per_cycle
     *
     * @return int|null
     */
    public function getQtyPerCycle(): ?int
    {
        return $this->container['qty_per_cycle'];
    }

    /**
     * Sets qty_per_cycle
     *
     * @param int|null $qty_per_cycle qty_per_cycle integer
     *
     * @return $this
     */
    public function setQtyPerCycle(?int $qty_per_cycle): static
    {
        if (is_null($qty_per_cycle)) {
            throw new InvalidArgumentException('non-nullable qty_per_cycle cannot be null');
        }
        $this->container['qty_per_cycle'] = $qty_per_cycle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


