<?php
/**
 * GetFleetsFleetIdMembers200Ok
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetFleetsFleetIdMembers200Ok Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetFleetsFleetIdMembers200Ok implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_fleets_fleet_id_members_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'character_id' => 'int',
        'join_time' => '\DateTime',
        'role' => 'string',
        'role_name' => 'string',
        'ship_type_id' => 'int',
        'solar_system_id' => 'int',
        'squad_id' => 'int',
        'station_id' => 'int',
        'takes_fleet_warp' => 'bool',
        'wing_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'character_id' => 'int32',
        'join_time' => 'date-time',
        'role' => null,
        'role_name' => null,
        'ship_type_id' => 'int32',
        'solar_system_id' => 'int32',
        'squad_id' => 'int64',
        'station_id' => 'int64',
        'takes_fleet_warp' => null,
        'wing_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'character_id' => false,
        'join_time' => false,
        'role' => false,
        'role_name' => false,
        'ship_type_id' => false,
        'solar_system_id' => false,
        'squad_id' => false,
        'station_id' => false,
        'takes_fleet_warp' => false,
        'wing_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'character_id' => 'character_id',
        'join_time' => 'join_time',
        'role' => 'role',
        'role_name' => 'role_name',
        'ship_type_id' => 'ship_type_id',
        'solar_system_id' => 'solar_system_id',
        'squad_id' => 'squad_id',
        'station_id' => 'station_id',
        'takes_fleet_warp' => 'takes_fleet_warp',
        'wing_id' => 'wing_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'character_id' => 'setCharacterId',
        'join_time' => 'setJoinTime',
        'role' => 'setRole',
        'role_name' => 'setRoleName',
        'ship_type_id' => 'setShipTypeId',
        'solar_system_id' => 'setSolarSystemId',
        'squad_id' => 'setSquadId',
        'station_id' => 'setStationId',
        'takes_fleet_warp' => 'setTakesFleetWarp',
        'wing_id' => 'setWingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'character_id' => 'getCharacterId',
        'join_time' => 'getJoinTime',
        'role' => 'getRole',
        'role_name' => 'getRoleName',
        'ship_type_id' => 'getShipTypeId',
        'solar_system_id' => 'getSolarSystemId',
        'squad_id' => 'getSquadId',
        'station_id' => 'getStationId',
        'takes_fleet_warp' => 'getTakesFleetWarp',
        'wing_id' => 'getWingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const ROLE_FLEET_COMMANDER = 'fleet_commander';
    public const ROLE_WING_COMMANDER = 'wing_commander';
    public const ROLE_SQUAD_COMMANDER = 'squad_commander';
    public const ROLE_SQUAD_MEMBER = 'squad_member';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getRoleAllowableValues()
    {
        return [
            self::ROLE_FLEET_COMMANDER,
            self::ROLE_WING_COMMANDER,
            self::ROLE_SQUAD_COMMANDER,
            self::ROLE_SQUAD_MEMBER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('character_id', $data ?? [], null);
        $this->setIfExists('join_time', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('role_name', $data ?? [], null);
        $this->setIfExists('ship_type_id', $data ?? [], null);
        $this->setIfExists('solar_system_id', $data ?? [], null);
        $this->setIfExists('squad_id', $data ?? [], null);
        $this->setIfExists('station_id', $data ?? [], null);
        $this->setIfExists('takes_fleet_warp', $data ?? [], null);
        $this->setIfExists('wing_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['character_id'] === null) {
            $invalidProperties[] = "'character_id' can't be null";
        }
        if ($this->container['join_time'] === null) {
            $invalidProperties[] = "'join_time' can't be null";
        }
        if ($this->container['role'] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = self::getRoleAllowableValues();
        if (!is_null($this->container['role']) && !in_array($this->container['role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container['role'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['role_name'] === null) {
            $invalidProperties[] = "'role_name' can't be null";
        }
        if ($this->container['ship_type_id'] === null) {
            $invalidProperties[] = "'ship_type_id' can't be null";
        }
        if ($this->container['solar_system_id'] === null) {
            $invalidProperties[] = "'solar_system_id' can't be null";
        }
        if ($this->container['squad_id'] === null) {
            $invalidProperties[] = "'squad_id' can't be null";
        }
        if ($this->container['takes_fleet_warp'] === null) {
            $invalidProperties[] = "'takes_fleet_warp' can't be null";
        }
        if ($this->container['wing_id'] === null) {
            $invalidProperties[] = "'wing_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets character_id
     *
     * @return int
     */
    public function getCharacterId(): int
    {
        return $this->container['character_id'];
    }

    /**
     * Sets character_id
     *
     * @param int $character_id character_id integer
     *
     * @return $this
     */
    public function setCharacterId(int $character_id): static
    {
        if (is_null($character_id)) {
            throw new InvalidArgumentException('non-nullable character_id cannot be null');
        }
        $this->container['character_id'] = $character_id;

        return $this;
    }

    /**
     * Gets join_time
     *
     * @return \DateTime
     */
    public function getJoinTime(): \DateTime
    {
        return $this->container['join_time'];
    }

    /**
     * Sets join_time
     *
     * @param \DateTime $join_time join_time string
     *
     * @return $this
     */
    public function setJoinTime(\DateTime $join_time): static
    {
        if (is_null($join_time)) {
            throw new InvalidArgumentException('non-nullable join_time cannot be null');
        }
        $this->container['join_time'] = $join_time;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string
     */
    public function getRole(): string
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string $role Member’s role in fleet
     *
     * @return $this
     */
    public function setRole(string $role): static
    {
        if (is_null($role)) {
            throw new InvalidArgumentException('non-nullable role cannot be null');
        }
        $allowedValues = self::getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_name
     *
     * @return string
     */
    public function getRoleName(): string
    {
        return $this->container['role_name'];
    }

    /**
     * Sets role_name
     *
     * @param string $role_name Localized role names
     *
     * @return $this
     */
    public function setRoleName(string $role_name): static
    {
        if (is_null($role_name)) {
            throw new InvalidArgumentException('non-nullable role_name cannot be null');
        }
        $this->container['role_name'] = $role_name;

        return $this;
    }

    /**
     * Gets ship_type_id
     *
     * @return int
     */
    public function getShipTypeId(): int
    {
        return $this->container['ship_type_id'];
    }

    /**
     * Sets ship_type_id
     *
     * @param int $ship_type_id ship_type_id integer
     *
     * @return $this
     */
    public function setShipTypeId(int $ship_type_id): static
    {
        if (is_null($ship_type_id)) {
            throw new InvalidArgumentException('non-nullable ship_type_id cannot be null');
        }
        $this->container['ship_type_id'] = $ship_type_id;

        return $this;
    }

    /**
     * Gets solar_system_id
     *
     * @return int
     */
    public function getSolarSystemId(): int
    {
        return $this->container['solar_system_id'];
    }

    /**
     * Sets solar_system_id
     *
     * @param int $solar_system_id Solar system the member is located in
     *
     * @return $this
     */
    public function setSolarSystemId(int $solar_system_id): static
    {
        if (is_null($solar_system_id)) {
            throw new InvalidArgumentException('non-nullable solar_system_id cannot be null');
        }
        $this->container['solar_system_id'] = $solar_system_id;

        return $this;
    }

    /**
     * Gets squad_id
     *
     * @return int
     */
    public function getSquadId(): int
    {
        return $this->container['squad_id'];
    }

    /**
     * Sets squad_id
     *
     * @param int $squad_id ID of the squad the member is in. If not applicable, will be set to -1
     *
     * @return $this
     */
    public function setSquadId(int $squad_id): static
    {
        if (is_null($squad_id)) {
            throw new InvalidArgumentException('non-nullable squad_id cannot be null');
        }
        $this->container['squad_id'] = $squad_id;

        return $this;
    }

    /**
     * Gets station_id
     *
     * @return int|null
     */
    public function getStationId(): ?int
    {
        return $this->container['station_id'];
    }

    /**
     * Sets station_id
     *
     * @param int|null $station_id Station in which the member is docked in, if applicable
     *
     * @return $this
     */
    public function setStationId(?int $station_id): static
    {
        if (is_null($station_id)) {
            throw new InvalidArgumentException('non-nullable station_id cannot be null');
        }
        $this->container['station_id'] = $station_id;

        return $this;
    }

    /**
     * Gets takes_fleet_warp
     *
     * @return bool
     */
    public function getTakesFleetWarp(): bool
    {
        return $this->container['takes_fleet_warp'];
    }

    /**
     * Sets takes_fleet_warp
     *
     * @param bool $takes_fleet_warp Whether the member take fleet warps
     *
     * @return $this
     */
    public function setTakesFleetWarp(bool $takes_fleet_warp): static
    {
        if (is_null($takes_fleet_warp)) {
            throw new InvalidArgumentException('non-nullable takes_fleet_warp cannot be null');
        }
        $this->container['takes_fleet_warp'] = $takes_fleet_warp;

        return $this;
    }

    /**
     * Gets wing_id
     *
     * @return int
     */
    public function getWingId(): int
    {
        return $this->container['wing_id'];
    }

    /**
     * Sets wing_id
     *
     * @param int $wing_id ID of the wing the member is in. If not applicable, will be set to -1
     *
     * @return $this
     */
    public function setWingId(int $wing_id): static
    {
        if (is_null($wing_id)) {
            throw new InvalidArgumentException('non-nullable wing_id cannot be null');
        }
        $this->container['wing_id'] = $wing_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


