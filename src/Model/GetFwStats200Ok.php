<?php
/**
 * GetFwStats200Ok
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetFwStats200Ok Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetFwStats200Ok implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_fw_stats_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'faction_id' => 'int',
        'kills' => '\EsiClient\Model\GetFwStatsKills',
        'pilots' => 'int',
        'systems_controlled' => 'int',
        'victory_points' => '\EsiClient\Model\GetFwStatsVictoryPoints'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'faction_id' => 'int32',
        'kills' => null,
        'pilots' => 'int32',
        'systems_controlled' => 'int32',
        'victory_points' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'faction_id' => false,
        'kills' => false,
        'pilots' => false,
        'systems_controlled' => false,
        'victory_points' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'faction_id' => 'faction_id',
        'kills' => 'kills',
        'pilots' => 'pilots',
        'systems_controlled' => 'systems_controlled',
        'victory_points' => 'victory_points'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'faction_id' => 'setFactionId',
        'kills' => 'setKills',
        'pilots' => 'setPilots',
        'systems_controlled' => 'setSystemsControlled',
        'victory_points' => 'setVictoryPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'faction_id' => 'getFactionId',
        'kills' => 'getKills',
        'pilots' => 'getPilots',
        'systems_controlled' => 'getSystemsControlled',
        'victory_points' => 'getVictoryPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('faction_id', $data ?? [], null);
        $this->setIfExists('kills', $data ?? [], null);
        $this->setIfExists('pilots', $data ?? [], null);
        $this->setIfExists('systems_controlled', $data ?? [], null);
        $this->setIfExists('victory_points', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['faction_id'] === null) {
            $invalidProperties[] = "'faction_id' can't be null";
        }
        if ($this->container['kills'] === null) {
            $invalidProperties[] = "'kills' can't be null";
        }
        if ($this->container['pilots'] === null) {
            $invalidProperties[] = "'pilots' can't be null";
        }
        if ($this->container['systems_controlled'] === null) {
            $invalidProperties[] = "'systems_controlled' can't be null";
        }
        if ($this->container['victory_points'] === null) {
            $invalidProperties[] = "'victory_points' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets faction_id
     *
     * @return int
     */
    public function getFactionId(): int
    {
        return $this->container['faction_id'];
    }

    /**
     * Sets faction_id
     *
     * @param int $faction_id faction_id integer
     *
     * @return $this
     */
    public function setFactionId(int $faction_id): static
    {
        if (is_null($faction_id)) {
            throw new InvalidArgumentException('non-nullable faction_id cannot be null');
        }
        $this->container['faction_id'] = $faction_id;

        return $this;
    }

    /**
     * Gets kills
     *
     * @return \EsiClient\Model\GetFwStatsKills
     */
    public function getKills(): \EsiClient\Model\GetFwStatsKills
    {
        return $this->container['kills'];
    }

    /**
     * Sets kills
     *
     * @param \EsiClient\Model\GetFwStatsKills $kills kills
     *
     * @return $this
     */
    public function setKills(\EsiClient\Model\GetFwStatsKills $kills): static
    {
        if (is_null($kills)) {
            throw new InvalidArgumentException('non-nullable kills cannot be null');
        }
        $this->container['kills'] = $kills;

        return $this;
    }

    /**
     * Gets pilots
     *
     * @return int
     */
    public function getPilots(): int
    {
        return $this->container['pilots'];
    }

    /**
     * Sets pilots
     *
     * @param int $pilots How many pilots fight for the given faction
     *
     * @return $this
     */
    public function setPilots(int $pilots): static
    {
        if (is_null($pilots)) {
            throw new InvalidArgumentException('non-nullable pilots cannot be null');
        }
        $this->container['pilots'] = $pilots;

        return $this;
    }

    /**
     * Gets systems_controlled
     *
     * @return int
     */
    public function getSystemsControlled(): int
    {
        return $this->container['systems_controlled'];
    }

    /**
     * Sets systems_controlled
     *
     * @param int $systems_controlled The number of solar systems controlled by the given faction
     *
     * @return $this
     */
    public function setSystemsControlled(int $systems_controlled): static
    {
        if (is_null($systems_controlled)) {
            throw new InvalidArgumentException('non-nullable systems_controlled cannot be null');
        }
        $this->container['systems_controlled'] = $systems_controlled;

        return $this;
    }

    /**
     * Gets victory_points
     *
     * @return \EsiClient\Model\GetFwStatsVictoryPoints
     */
    public function getVictoryPoints(): \EsiClient\Model\GetFwStatsVictoryPoints
    {
        return $this->container['victory_points'];
    }

    /**
     * Sets victory_points
     *
     * @param \EsiClient\Model\GetFwStatsVictoryPoints $victory_points victory_points
     *
     * @return $this
     */
    public function setVictoryPoints(\EsiClient\Model\GetFwStatsVictoryPoints $victory_points): static
    {
        if (is_null($victory_points)) {
            throw new InvalidArgumentException('non-nullable victory_points cannot be null');
        }
        $this->container['victory_points'] = $victory_points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


