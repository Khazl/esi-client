<?php
/**
 * GetSovereigntyStructures200Ok
 *
 * PHP version 8.1
 *
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * The version of the OpenAPI document: 1.33
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EsiClient\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use EsiClient\ObjectSerializer;

/**
 * GetSovereigntyStructures200Ok Class Doc Comment
 *
 * @description 200 ok object
 * @package  EsiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class GetSovereigntyStructures200Ok implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'get_sovereignty_structures_200_ok';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'alliance_id' => 'int',
        'solar_system_id' => 'int',
        'structure_id' => 'int',
        'structure_type_id' => 'int',
        'vulnerability_occupancy_level' => 'float',
        'vulnerable_end_time' => '\DateTime',
        'vulnerable_start_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'alliance_id' => 'int32',
        'solar_system_id' => 'int32',
        'structure_id' => 'int64',
        'structure_type_id' => 'int32',
        'vulnerability_occupancy_level' => 'float',
        'vulnerable_end_time' => 'date-time',
        'vulnerable_start_time' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'alliance_id' => false,
        'solar_system_id' => false,
        'structure_id' => false,
        'structure_type_id' => false,
        'vulnerability_occupancy_level' => false,
        'vulnerable_end_time' => false,
        'vulnerable_start_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'alliance_id' => 'alliance_id',
        'solar_system_id' => 'solar_system_id',
        'structure_id' => 'structure_id',
        'structure_type_id' => 'structure_type_id',
        'vulnerability_occupancy_level' => 'vulnerability_occupancy_level',
        'vulnerable_end_time' => 'vulnerable_end_time',
        'vulnerable_start_time' => 'vulnerable_start_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'alliance_id' => 'setAllianceId',
        'solar_system_id' => 'setSolarSystemId',
        'structure_id' => 'setStructureId',
        'structure_type_id' => 'setStructureTypeId',
        'vulnerability_occupancy_level' => 'setVulnerabilityOccupancyLevel',
        'vulnerable_end_time' => 'setVulnerableEndTime',
        'vulnerable_start_time' => 'setVulnerableStartTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'alliance_id' => 'getAllianceId',
        'solar_system_id' => 'getSolarSystemId',
        'structure_id' => 'getStructureId',
        'structure_type_id' => 'getStructureTypeId',
        'vulnerability_occupancy_level' => 'getVulnerabilityOccupancyLevel',
        'vulnerable_end_time' => 'getVulnerableEndTime',
        'vulnerable_start_time' => 'getVulnerableStartTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('alliance_id', $data ?? [], null);
        $this->setIfExists('solar_system_id', $data ?? [], null);
        $this->setIfExists('structure_id', $data ?? [], null);
        $this->setIfExists('structure_type_id', $data ?? [], null);
        $this->setIfExists('vulnerability_occupancy_level', $data ?? [], null);
        $this->setIfExists('vulnerable_end_time', $data ?? [], null);
        $this->setIfExists('vulnerable_start_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['alliance_id'] === null) {
            $invalidProperties[] = "'alliance_id' can't be null";
        }
        if ($this->container['solar_system_id'] === null) {
            $invalidProperties[] = "'solar_system_id' can't be null";
        }
        if ($this->container['structure_id'] === null) {
            $invalidProperties[] = "'structure_id' can't be null";
        }
        if ($this->container['structure_type_id'] === null) {
            $invalidProperties[] = "'structure_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alliance_id
     *
     * @return int
     */
    public function getAllianceId(): int
    {
        return $this->container['alliance_id'];
    }

    /**
     * Sets alliance_id
     *
     * @param int $alliance_id The alliance that owns the structure.
     *
     * @return $this
     */
    public function setAllianceId(int $alliance_id): static
    {
        if (is_null($alliance_id)) {
            throw new InvalidArgumentException('non-nullable alliance_id cannot be null');
        }
        $this->container['alliance_id'] = $alliance_id;

        return $this;
    }

    /**
     * Gets solar_system_id
     *
     * @return int
     */
    public function getSolarSystemId(): int
    {
        return $this->container['solar_system_id'];
    }

    /**
     * Sets solar_system_id
     *
     * @param int $solar_system_id Solar system in which the structure is located.
     *
     * @return $this
     */
    public function setSolarSystemId(int $solar_system_id): static
    {
        if (is_null($solar_system_id)) {
            throw new InvalidArgumentException('non-nullable solar_system_id cannot be null');
        }
        $this->container['solar_system_id'] = $solar_system_id;

        return $this;
    }

    /**
     * Gets structure_id
     *
     * @return int
     */
    public function getStructureId(): int
    {
        return $this->container['structure_id'];
    }

    /**
     * Sets structure_id
     *
     * @param int $structure_id Unique item ID for this structure.
     *
     * @return $this
     */
    public function setStructureId(int $structure_id): static
    {
        if (is_null($structure_id)) {
            throw new InvalidArgumentException('non-nullable structure_id cannot be null');
        }
        $this->container['structure_id'] = $structure_id;

        return $this;
    }

    /**
     * Gets structure_type_id
     *
     * @return int
     */
    public function getStructureTypeId(): int
    {
        return $this->container['structure_type_id'];
    }

    /**
     * Sets structure_type_id
     *
     * @param int $structure_type_id A reference to the type of structure this is.
     *
     * @return $this
     */
    public function setStructureTypeId(int $structure_type_id): static
    {
        if (is_null($structure_type_id)) {
            throw new InvalidArgumentException('non-nullable structure_type_id cannot be null');
        }
        $this->container['structure_type_id'] = $structure_type_id;

        return $this;
    }

    /**
     * Gets vulnerability_occupancy_level
     *
     * @return float|null
     */
    public function getVulnerabilityOccupancyLevel(): ?float
    {
        return $this->container['vulnerability_occupancy_level'];
    }

    /**
     * Sets vulnerability_occupancy_level
     *
     * @param float|null $vulnerability_occupancy_level The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
     *
     * @return $this
     */
    public function setVulnerabilityOccupancyLevel(?float $vulnerability_occupancy_level): static
    {
        if (is_null($vulnerability_occupancy_level)) {
            throw new InvalidArgumentException('non-nullable vulnerability_occupancy_level cannot be null');
        }
        $this->container['vulnerability_occupancy_level'] = $vulnerability_occupancy_level;

        return $this;
    }

    /**
     * Gets vulnerable_end_time
     *
     * @return \DateTime|null
     */
    public function getVulnerableEndTime(): ?\DateTime
    {
        return $this->container['vulnerable_end_time'];
    }

    /**
     * Sets vulnerable_end_time
     *
     * @param \DateTime|null $vulnerable_end_time The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
     *
     * @return $this
     */
    public function setVulnerableEndTime(?\DateTime $vulnerable_end_time): static
    {
        if (is_null($vulnerable_end_time)) {
            throw new InvalidArgumentException('non-nullable vulnerable_end_time cannot be null');
        }
        $this->container['vulnerable_end_time'] = $vulnerable_end_time;

        return $this;
    }

    /**
     * Gets vulnerable_start_time
     *
     * @return \DateTime|null
     */
    public function getVulnerableStartTime(): ?\DateTime
    {
        return $this->container['vulnerable_start_time'];
    }

    /**
     * Sets vulnerable_start_time
     *
     * @param \DateTime|null $vulnerable_start_time The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
     *
     * @return $this
     */
    public function setVulnerableStartTime(?\DateTime $vulnerable_start_time): static
    {
        if (is_null($vulnerable_start_time)) {
            throw new InvalidArgumentException('non-nullable vulnerable_start_time cannot be null');
        }
        $this->container['vulnerable_start_time'] = $vulnerable_start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


